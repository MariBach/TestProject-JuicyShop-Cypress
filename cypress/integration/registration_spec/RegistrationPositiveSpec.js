/// <reference types="cypress" />
import RegistrationPage from "../../support/page_objects/RegistrationPage.js"
import HomePage from "../../support/page_objects/HomePage.js"
import LoginPage from "../../support/page_objects/LoginPage.js"
import {randomIndex, randomEmail} from "../../support/functions.js"


describe ('Registration check', function(){
    beforeEach (function()
    {
        cy.fixture('example').then(function(data)
        {
           this.data = data;
        })
    })
    it('User can register with valid credentials', function()
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))
        homePage.closeWelcomeBanner()   
        homePage.navigateToAccountMenu()        
        homePage.navigateToLogin()
        loginPage.navigateToRegistration()
        registrationPage.fillEmail(randomEmail)
        registrationPage.fillPassword(this.data.password[0])
        registrationPage.repeatPassword(this.data.password[0])
        registrationPage.openSecurityQuestionList()
        registrationPage.chooseSecurityQuestion(this.data.question[randomIndex])
        registrationPage.fillSecurityAnswer(this.data.answer)
        registrationPage.submitRegistration()
        loginPage.getRegistrationConfirmationMsg().should('include.text', "Registration completed successfully. You can now log in.")
    })
    it('User can leave registration page', ()=>
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))
        homePage.closeWelcomeBanner()   
        homePage.navigateToAccountMenu()        
        homePage.navigateToLogin()
        loginPage.navigateToRegistration()
        registrationPage.returnToLoginPage()        
        loginPage.getPageName().should('include.text', 'Login')
    })
    it('User can see 5 password recomendations after choosing "Show password advice" option', function()
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))
        homePage.closeWelcomeBanner()   
        homePage.navigateToAccountMenu()        
        homePage.navigateToLogin()
        loginPage.navigateToRegistration()
        registrationPage.fillEmail(randomEmail)
        registrationPage.fillPassword(this.data.password[0])
        registrationPage.repeatPassword(this.data.password[0])
        registrationPage.showPasswordAdvice()
        registrationPage.getPasswordStrengthInfo().should('be.visible')
        registrationPage.getPswdAdviceList().should('have.length', '5')
        registrationPage.getPswdAdviseIdentificator().eq(2).should('have.text', 'done')                
    })
    it('Requirement "contains at least one lower character" is marked as "done" in passwords recomendations', function()
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))
        homePage.closeWelcomeBanner()   
        homePage.navigateToAccountMenu()        
        homePage.navigateToLogin()
        loginPage.navigateToRegistration()
        registrationPage.fillEmail(randomEmail)
        registrationPage.fillPassword(this.data.password[1])
        registrationPage.repeatPassword(this.data.password[1])
        registrationPage.showPasswordAdvice()        
        registrationPage.getPswdAdviceList().should('have.length', '5')
        registrationPage.getPswdAdviseIdentificator().eq(0).should('have.text', 'done')
    })
    it('Requirement "contains at least one upper character" is marked as "done" in passwords recomendations', function()
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))
        homePage.closeWelcomeBanner()   
        homePage.navigateToAccountMenu()        
        homePage.navigateToLogin()
        loginPage.navigateToRegistration()
        registrationPage.fillEmail(randomEmail)
        registrationPage.fillPassword(this.data.password[2])
        registrationPage.repeatPassword(this.data.password[2])
        registrationPage.showPasswordAdvice()        
        registrationPage.getPswdAdviceList().should('have.length', '5')
        registrationPage.getPswdAdviseIdentificator().eq(1).should('have.text', 'done')
    })
    it('Requirement "contains at least 8 characters" is marked as "done" in passwords recomendations', function()
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))
        homePage.closeWelcomeBanner()   
        homePage.navigateToAccountMenu()        
        homePage.navigateToLogin()
        loginPage.navigateToRegistration()
        registrationPage.fillEmail(randomEmail)
        registrationPage.fillPassword(this.data.password[3])
        registrationPage.repeatPassword(this.data.password[3])
        registrationPage.showPasswordAdvice()        
        registrationPage.getPswdAdviceList().should('have.length', '5')        
        registrationPage.getPswdAdviseIdentificator().eq(2).should('have.text', 'done')
        registrationPage.getPswdAdviseIdentificator().eq(4).should('have.text', 'done')
    })
    it('User can choose any question from Sequrity Question list', function()
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))
        homePage.closeWelcomeBanner()   
        homePage.navigateToAccountMenu()        
        homePage.navigateToLogin()
        loginPage.navigateToRegistration()
        registrationPage.openSecurityQuestionList()
        registrationPage.getChooseSecQuestion().should('have.length', '14')
        registrationPage.chooseSecurityQuestion(this.data.question[randomIndex])
        registrationPage.getSecQuestion().should('not.exist')
    })
})