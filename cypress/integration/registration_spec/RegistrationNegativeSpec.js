/// <reference types="cypress" />
import RegistrationPage from "../../support/page_objects/RegistrationPage.js"
import HomePage from "../../support/page_objects/HomePage.js"
import LoginPage from "../../support/page_objects/LoginPage.js"
import {randomIndex, randomEmail} from "../../support/functions.js"


describe ('Registration check', function(){
    beforeEach(function()
    {
        cy.fixture('example').then(function(data)
        {
           this.data = data;
        })
    })
    it('User is informed in case of invalid email input', function()
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))        
        homePage.closeWelcomeBanner()
        homePage.navigateToAccountMenu()        
        homePage.navigateToLogin()  
        loginPage.navigateToRegistration()
        registrationPage.fillEmail(this.data.invalidEmail)
        registrationPage.moveToPasswordField()     
        registrationPage.getInvalidInputMsg().should('include.text', "Email address is not valid.")
    })
    it("User is informed in case repeat password doesn't match with the first input password", function()
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))
        homePage.closeWelcomeBanner()
        homePage.navigateToAccountMenu()       
        homePage.navigateToLogin()      
        loginPage.navigateToRegistration() 
        registrationPage.fillEmail(randomEmail)
        registrationPage.fillPassword(this.data.password[0])
        registrationPage.repeatPassword(this.data.password[1])
        registrationPage.moveToPasswordField()
        registrationPage.getInvalidInputMsg().should('include.text', "Passwords do not match")
    })
    it("User can not register if password length is less than 5 characters", function()
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))
        homePage.closeWelcomeBanner()
        homePage.navigateToAccountMenu()       
        homePage.navigateToLogin()      
        loginPage.navigateToRegistration() 
        registrationPage.fillEmail(randomEmail)
        registrationPage.fillPassword(this.data.invalidPassword)
        registrationPage.moveToRepeatPasswordField()       
        registrationPage.getInvalidInputMsg().should('include.text', "Password must be 5-40 characters long.")
    })
    it('User can not register without choosing the security question', function()
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))
        homePage.closeWelcomeBanner()
        homePage.navigateToAccountMenu()       
        homePage.navigateToLogin()      
        loginPage.navigateToRegistration()
        registrationPage.fillEmail(randomEmail)
        registrationPage.fillPassword(this.data.password[0])
        registrationPage.repeatPassword(this.data.password[0])
        registrationPage.fillSecurityAnswer(this.data.answer)
        registrationPage.getRegisterBtn().should('be.disabled')
    })
    it('User is not able to register with not unique email', function()
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))
        homePage.closeWelcomeBanner()
        homePage.navigateToAccountMenu()       
        homePage.navigateToLogin()      
        loginPage.navigateToRegistration()
        registrationPage.fillEmail(this.data.email[0])
        registrationPage.fillPassword(this.data.password[0])
        registrationPage.repeatPassword(this.data.password[0])
        registrationPage.openSecurityQuestionList()
        registrationPage.chooseSecurityQuestion(this.data.question[randomIndex])
        registrationPage.fillSecurityAnswer(this.data.answer)
        registrationPage.submitRegistration()
        registrationPage.getRegistrationErrorMsg().should('include.text', "Email must be unique")
    })
    it('User can not register without fulfilled Email field', function()
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))
        homePage.closeWelcomeBanner()
        homePage.navigateToAccountMenu()       
        homePage.navigateToLogin()      
        loginPage.navigateToRegistration()
        registrationPage.fillPassword(this.data.password[0])
        registrationPage.repeatPassword(this.data.password[0])
        registrationPage.openSecurityQuestionList()
        registrationPage.chooseSecurityQuestion(this.data.question[randomIndex])
        registrationPage.fillSecurityAnswer(this.data.answer)
        registrationPage.getRegisterBtn().should('be.disabled')
    })
    it('User can not register without fulfilled Password field', function()
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))
        homePage.closeWelcomeBanner()
        homePage.navigateToAccountMenu()       
        homePage.navigateToLogin()      
        loginPage.navigateToRegistration()
        registrationPage.fillEmail(randomEmail)
        registrationPage.repeatPassword(this.data.password[0])
        registrationPage.openSecurityQuestionList()
        registrationPage.chooseSecurityQuestion(this.data.question[randomIndex])
        registrationPage.fillSecurityAnswer(this.data.answer)
        registrationPage.getRegisterBtn().should('be.disabled')
    })
    it('User can not register without fulfilled Repeat Password field', function()
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))
        homePage.closeWelcomeBanner()
        homePage.navigateToAccountMenu()       
        homePage.navigateToLogin()      
        loginPage.navigateToRegistration()
        registrationPage.fillEmail(randomEmail)
        registrationPage.fillPassword(this.data.password[0])
        registrationPage.openSecurityQuestionList()
        registrationPage.chooseSecurityQuestion(this.data.question[randomIndex])
        registrationPage.fillSecurityAnswer(this.data.answer)
        registrationPage.getRegisterBtn().should('be.disabled')
    })
    it('User can not register without fulfilled Security answer field', function()
    {
        const registrationPage = new RegistrationPage()
        const homePage = new HomePage()
        const loginPage = new LoginPage()
        cy.visit(Cypress.env("url"))
        homePage.closeWelcomeBanner()
        homePage.navigateToAccountMenu()       
        homePage.navigateToLogin()      
        loginPage.navigateToRegistration()
        registrationPage.fillEmail(randomEmail)
        registrationPage.fillPassword(this.data.password[0])
        registrationPage.repeatPassword(this.data.password[0])
        registrationPage.openSecurityQuestionList()
        registrationPage.chooseSecurityQuestion(this.data.question[randomIndex])
        registrationPage.getRegisterBtn().should('be.disabled')
    })    
})